# Name: TextCorrector
# Description: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—à–∏–±–æ–∫ –≤ —Ç–µ–∫—Å—Ç–µ —Å –ø–æ–º–æ—â—å—é –ò–ò
# Commands: correcttext, autocorrector, correctstatus, model
# meta developer: @YahooMods
# requires: g4f

from .. import loader, utils
from g4f.client import Client
import logging

logger = logging.getLogger(__name__)

@loader.tds
class TextCorrectorMod(loader.Module):
    """–ú–æ–¥—É–ª—å –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—à–∏–±–æ–∫ –≤ —Ç–µ–∫—Å—Ç–µ —Å –ø–æ–º–æ—â—å—é –ò–ò"""
    
    strings = {
        "name": "TextCorrector",
        "autocorrector_enabled": "üü¢ –ê–≤—Ç–æ–∫–æ—Ä—Ä–µ–∫—Ç–æ—Ä –≤–∫–ª—é—á–µ–Ω",
        "autocorrector_disabled": "üî¥ –ê–≤—Ç–æ–∫–æ—Ä—Ä–µ–∫—Ç–æ—Ä –≤—ã–∫–ª—é—á–µ–Ω", 
        "correcting": "üîÑ –ò—Å–ø—Ä–∞–≤–ª—è—é –æ—à–∏–±–∫–∏...",
        "correction_error": "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ —Ç–µ–∫—Å—Ç–∞: {}",
        "no_text": "‚ùå –ù–µ—Ç —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è",
        "corrected": "‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ:\n\n{}",
        "status_on": "üü¢ –ê–≤—Ç–æ–∫–æ—Ä—Ä–µ–∫—Ç–æ—Ä: –≤–∫–ª—é—á–µ–Ω",
        "status_off": "üî¥ –ê–≤—Ç–æ–∫–æ—Ä—Ä–µ–∫—Ç–æ—Ä: –≤—ã–∫–ª—é—á–µ–Ω",
        "model_set": "‚úÖ –ú–æ–¥–µ–ª—å –ò–ò —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: {}",
        "model_no_arg": "‚ùå –£–∫–∞–∂–∏—Ç–µ –º–æ–¥–µ–ª—å –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã .model",
        "current_model": "ü§ñ –¢–µ–∫—É—â–∞—è –º–æ–¥–µ–ª—å: {}"
    }
    
    def __init__(self):
        self.config = loader.ModuleConfig(
            loader.ConfigValue(
                "auto_correct",
                False,
                lambda: "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏—Å–ø—Ä–∞–≤–ª—è—Ç—å –æ—à–∏–±–∫–∏ –≤ —Å–æ–æ–±—â–µ–Ω–∏—è—Ö",
                validator=loader.validators.Boolean()
            ),
            loader.ConfigValue(
                "model",
                "gpt-4o-mini",
                lambda: "–ú–æ–¥–µ–ª—å –ò–ò –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞"
            )
        )
        self.client = None
    
    async def client_ready(self, client, db):
        self.client = Client()
    
    async def correct_text(self, text: str) -> str:
        """–ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç –æ—à–∏–±–∫–∏ –≤ —Ç–µ–∫—Å—Ç–µ —Å –ø–æ–º–æ—â—å—é –ò–ò"""
        try:
            prompt = f"""–ò—Å–ø—Ä–∞–≤—å —Ç–æ–ª—å–∫–æ –æ—Ä—Ñ–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–µ –∏ –≥—Ä–∞–º–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏ –≤ —Å–ª–æ–≤–∞—Ö –≤ —ç—Ç–æ–º —Ç–µ–∫—Å—Ç–µ. 
–ù–ï –¥–æ–±–∞–≤–ª—è–π –∑–∞–ø—è—Ç—ã–µ, —Ç–æ—á–∫–∏ –∏–ª–∏ –¥—Ä—É–≥–∏–µ –∑–Ω–∞–∫–∏ –ø—Ä–µ–ø–∏–Ω–∞–Ω–∏—è. 
–ù–ï –º–µ–Ω—è–π —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π. 
–ù–ï –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π —Ç–µ–∫—Å—Ç.
–ü—Ä–æ—Å—Ç–æ –∏—Å–ø—Ä–∞–≤—å –æ—à–∏–±–∫–∏ –≤ —Å–ª–æ–≤–∞—Ö, —Å–æ—Ö—Ä–∞–Ω–∏–≤ –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω–æ–µ –∫–∞–∫ –µ—Å—Ç—å:

{text}"""
            
            model_name = self.config["model"]
            response = self.client.chat.completions.create(
                model=model_name,
                messages=[{"role": "user", "content": prompt}],
                web_search=False
            )
            
            corrected_text = response.choices[0].message.content.strip()
            return corrected_text
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ —Ç–µ–∫—Å—Ç–∞: {e}")
            return text
    
    @loader.command()
    async def correcttext(self, message):
        """–ò—Å–ø—Ä–∞–≤–∏—Ç—å –æ—à–∏–±–∫–∏ –≤ —Ç–µ–∫—Å—Ç–µ"""
        args = utils.get_args_raw(message)
        
        if not args:
            reply = await message.get_reply_message()
            if reply and reply.text:
                text = reply.text
            else:
                await utils.answer(message, self.strings("no_text"))
                return
        else:
            text = args
        
        await utils.answer(message, self.strings("correcting"))
        
        try:
            corrected = await self.correct_text(text)
            await utils.answer(message, self.strings("corrected").format(corrected))
        except Exception as e:
            await utils.answer(message, self.strings("correction_error").format(str(e)))
    
    @loader.command()
    async def autocorrector(self, message):
        """–í–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–∫–æ—Ä—Ä–µ–∫—Ç–æ—Ä"""
        current = self.config["auto_correct"]
        self.config["auto_correct"] = not current
        
        if self.config["auto_correct"]:
            await utils.answer(message, self.strings("autocorrector_enabled"))
        else:
            await utils.answer(message, self.strings("autocorrector_disabled"))
    
    @loader.command()
    async def correctstatus(self, message):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å –∞–≤—Ç–æ–∫–æ—Ä—Ä–µ–∫—Ç–æ—Ä–∞"""
        if self.config["auto_correct"]:
            await utils.answer(message, self.strings("status_on"))
        else:
            await utils.answer(message, self.strings("status_off"))
    
    @loader.command()
    async def model(self, message):
        """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–æ–¥–µ–ª—å –ò–ò –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞"""
        args = utils.get_args_raw(message)
        
        if not args:
            current_model = self.config["model"]
            await utils.answer(message, self.strings("current_model").format(current_model))
            return
            
        new_model = args.strip()
        self.config["model"] = new_model
        await utils.answer(message, self.strings("model_set").format(new_model))
    
    @loader.watcher("out")
    async def watcher(self, message):
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏—Å–ø—Ä–∞–≤–ª—è–µ—Ç –æ—à–∏–±–∫–∏ –≤ –∏—Å—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö"""
        if not self.config["auto_correct"]:
            return
            
        if not hasattr(message, 'text') or not message.text or message.text.startswith("."):
            return
            
        if not hasattr(message, 'out') or not message.out:
            return
            
        try:
            corrected = await self.correct_text(message.text)
            
            if corrected != message.text and corrected.strip():
                await message.edit(corrected)
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –∞–≤—Ç–æ–∫–æ—Ä—Ä–µ–∫—Ç–æ—Ä–µ: {e}")
